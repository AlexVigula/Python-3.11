########################################################
#                                                       #
#    –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ  #
#    dev Alex Vigula      tg @gunsxp                    #
#                                                       #
#########################################################

import os
import asyncio
import aiomysql
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.types import Message, InputFile, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from dotenv import load_dotenv
import imghdr
from PIL import Image
import io

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN_TEST')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
MYSQL_HOST = os.getenv('MYSQL_HOST')
MYSQL_USER = os.getenv('MYSQL_USER')
MYSQL_PASS = os.getenv('MYSQL_PASS')
MYSQL_DB = os.getenv('MYSQL_DB')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = 'imagesss'
if not os.path.exists(IMAGES_DIR):
    os.makedirs(IMAGES_DIR)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ—Ñ–∏–ª—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
def create_main_kb() -> ReplyKeyboardMarkup:
    profile_button = KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    edit_button = KeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    keyboard = ReplyKeyboardMarkup(keyboard=[[profile_button, edit_button]], resize_keyboard=True)
    return keyboard

async def save_photo_path_to_db(user_id, file_path):
    try:
        conn = await aiomysql.connect(
            host=os.getenv('MYSQL_HOST'),
            port=3306,
            user=os.getenv('MYSQL_USER'),
            password=os.getenv('MYSQL_PASS'),
            db=os.getenv('MYSQL_DB')
        )
        async with conn.cursor() as cursor:
            await cursor.execute("UPDATE users SET photo_path=%s WHERE id=%s", (file_path, user_id))
            await conn.commit()
        print(f"–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            conn.close()

async def get_photo_path_from_db(user_id):
    try:
        conn = await aiomysql.connect(
            host=os.getenv('MYSQL_HOST'),
            port=3306,
            user=os.getenv('MYSQL_USER'),
            password=os.getenv('MYSQL_PASS'),
            db=os.getenv('MYSQL_DB')
        )
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT photo_path FROM users WHERE id=%s", (user_id,))
            result = await cursor.fetchone()
            if result and result[0]:
                return result[0]
            else:
                print("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        if conn:
            conn.close()

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é.", reply_markup=create_main_kb())

@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    file = await bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_extension = os.path.splitext(file.file_path)[1]
    file_name = f"{user_id}_{file_id}{file_extension}"
    file_path = os.path.join(IMAGES_DIR, file_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await bot.download_file(file.file_path, file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_photo_path_to_db(user_id, file_path)
    
    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=create_main_kb())

@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        photo_path = await get_photo_path_from_db(user_id)
        if photo_path and os.path.exists(photo_path):
            await message.answer_photo(FSInputFile(photo_path), caption="–í–æ—Ç –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif message.text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
